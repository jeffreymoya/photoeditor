name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  TERRAFORM_VERSION: '1.6.0'
  # Turborepo remote caching (see ADR-0007)
  # TURBO_TOKEN: Stored in GitHub Secrets (from AWS SSM /photoeditor/turborepo/token)
  # TURBO_TEAM: photoeditor (Vercel team slug)

jobs:
  # QA Suite - Centralized fitness functions
  qa-suite:
    name: QA Suite (Fitness Functions)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm via Corepack
        run: corepack prepare pnpm@8.15.4 --activate

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.cache/corepack
          key: ${{ runner.os }}-corepack-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-corepack-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Run QA Suite
        id: qa-suite
        run: ./node_modules/.bin/turbo run qa --parallel
        continue-on-error: true
        env:
          # Enable Turborepo remote caching (ADR-0007)
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: photoeditor

      - name: Upload contract diff artifact
        if: failure() && steps.qa-suite.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: contract-diff
          path: contract-diff.json
          retention-days: 30
          if-no-files-found: ignore

      - name: Comment PR with contract diff
        if: github.event_name == 'pull_request' && failure() && steps.qa-suite.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Check if contract diff exists
            if (!fs.existsSync('contract-diff.json')) {
              console.log('No contract diff detected, skipping comment');
              return;
            }

            try {
              // Generate markdown comment
              const markdown = execSync('node scripts/ci/format-contract-diff.js', { encoding: 'utf8' });

              // Post comment to PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: markdown
              });
            } catch (error) {
              console.error('Error posting contract diff comment:', error);
            }

      - name: Fail if QA Suite failed
        if: steps.qa-suite.outcome == 'failure'
        run: exit 1

  # Coverage reporting (runs after QA suite for detailed metrics)
  coverage:
    name: Upload Coverage
    runs-on: ubuntu-latest
    needs: qa-suite
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm via Corepack
        run: corepack prepare pnpm@8.15.4 --activate

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.cache/corepack
          key: ${{ runner.os }}-corepack-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-corepack-

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend tests with coverage
        run: pnpm turbo run test --filter=@photoeditor/backend -- --coverage --coverageReporters=json-summary --coverageReporters=text
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: photoeditor

      - name: Check coverage thresholds
        run: |
          if [ -f backend/coverage/coverage-summary.json ]; then
            chmod +x tooling/coverage-check/check-coverage.sh
            tooling/coverage-check/check-coverage.sh backend/coverage/coverage-summary.json 60 60
          else
            echo "WARNING: Coverage summary not found, skipping coverage gate"
          fi

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          directory: backend/coverage
          flags: backend

  # Build artifacts (for deployment jobs)
  build:
    name: Build Lambda Artifacts
    runs-on: ubuntu-latest
    needs: qa-suite
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm via Corepack
        run: corepack prepare pnpm@8.15.4 --activate

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.cache/corepack
          key: ${{ runner.os }}-corepack-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-corepack-

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm turbo run build --filter=@photoeditor/shared

      - name: Build Lambda functions
        run: pnpm turbo run build:lambdas --filter=@photoeditor/backend
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: photoeditor

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/lambdas/
          retention-days: 30

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run tfsec on infrastructure
        if: ${{ hashFiles('infrastructure/**') != '' }}
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure
          soft_fail: false
          format: sarif
          sarif_file: tfsec-results.sarif

      - name: Upload tfsec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

      - name: Run gitleaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

  # Deploy to development environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, qa-suite]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && hashFiles('infrastructure/**') != ''
    environment:
      name: development
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/lambdas/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: cd infrastructure && terraform init
        env:
          TF_VAR_environment: dev

      - name: Terraform Plan
        run: cd infrastructure && terraform plan -var-file=terraform.tfvars.dev
        env:
          TF_VAR_environment: dev

      - name: Terraform Apply
        id: deploy
        run: |
          cd infrastructure && terraform apply -var-file=terraform.tfvars.dev -auto-approve
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_environment: dev

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.api_gateway_url }}"
          # Add actual smoke test commands here
          curl -f ${{ steps.deploy.outputs.api_gateway_url }}/health || exit 1

  # Deploy to production environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, qa-suite, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && hashFiles('infrastructure/**') != ''
    environment:
      name: production
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/lambdas/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: Terraform Init
        run: cd infrastructure && terraform init
        env:
          TF_VAR_environment: prod

      - name: Terraform Plan
        run: cd infrastructure && terraform plan -var-file=terraform.tfvars.prod
        env:
          TF_VAR_environment: prod

      - name: Terraform Apply
        id: deploy
        run: |
          cd infrastructure && terraform apply -var-file=terraform.tfvars.prod -auto-approve
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_environment: prod

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.api_gateway_url }}"
          # Add actual smoke test commands here
          curl -f ${{ steps.deploy.outputs.api_gateway_url }}/health || exit 1

      - name: Notify deployment
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "API Gateway URL: ${{ steps.deploy.outputs.api_gateway_url }}"
