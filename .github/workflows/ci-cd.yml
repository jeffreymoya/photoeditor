name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # Lint and validate code
  lint:
    name: Lint & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install workspace dependencies
        run: npm ci

      - name: Lint shared package
        run: npm run lint --prefix shared

      - name: Lint backend
        run: npm run lint --prefix backend

      - name: TypeScript check shared
        run: npm run typecheck --prefix shared

      - name: TypeScript check backend
        run: npm run typecheck --prefix backend

      - name: Validate dependency architecture
        run: npm run validate:deps

      - name: Check for dead code
        run: npm run stage:a:dead-exports || true

      - name: Check contract drift (STANDARDS.md line 40)
        id: contract-check
        run: npm run contracts:check
        continue-on-error: true

      - name: Upload contract diff artifact
        if: failure() && steps.contract-check.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: contract-diff
          path: contract-diff.json
          retention-days: 30

      - name: Comment PR with contract diff
        if: github.event_name == 'pull_request' && failure() && steps.contract-check.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            try {
              // Generate markdown comment
              const markdown = execSync('node scripts/ci/format-contract-diff.js', { encoding: 'utf8' });

              // Post comment to PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: markdown
              });

              // Fail the check to block merge
              core.setFailed('Contract drift detected - approval required');
            } catch (error) {
              console.error('Error posting contract diff comment:', error);
            }

      - name: Validate API surface changes
        run: cd shared && npm run api-extractor

      - name: Check for pending changesets (shared contracts governance)
        run: npm run changeset:status
        continue-on-error: true

  # Test backend services
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install workspace dependencies
        run: npm ci

      - name: Run backend tests with coverage
        run: npm test --prefix backend -- --coverage --coverageReporters=json-summary --coverageReporters=text

      - name: Run contract compatibility tests
        run: npm run test:contracts

      - name: Check coverage thresholds
        run: |
          if [ -f backend/coverage/coverage-summary.json ]; then
            chmod +x tooling/coverage-check/check-coverage.sh
            tooling/coverage-check/check-coverage.sh backend/coverage/coverage-summary.json 60 60
          else
            echo "WARNING: Coverage summary not found, skipping coverage gate"
          fi

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          directory: backend/coverage
          flags: backend

  # Build Lambda functions
  build:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install workspace dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build --prefix shared

      - name: Build Lambda functions
        run: npm run build:lambdas --prefix backend

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/lambdas/
          retention-days: 30

  # Validate Terraform
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: cd infrastructure && terraform fmt -check -recursive

      - name: Terraform Init
        run: cd infrastructure && terraform init -backend=false

      - name: Terraform Validate
        run: cd infrastructure && terraform validate

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run tfsec on infrastructure
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure
          soft_fail: false
          format: sarif
          sarif_file: tfsec-results.sarif

      - name: Upload tfsec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

      - name: Run gitleaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

  # Deploy to development environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, terraform-validate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/lambdas/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: cd infrastructure && terraform init
        env:
          TF_VAR_environment: dev

      - name: Terraform Plan
        run: cd infrastructure && terraform plan -var-file=terraform.tfvars.dev
        env:
          TF_VAR_environment: dev

      - name: Terraform Apply
        id: deploy
        run: |
          cd infrastructure && terraform apply -var-file=terraform.tfvars.dev -auto-approve
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_environment: dev

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.api_gateway_url }}"
          # Add actual smoke test commands here
          curl -f ${{ steps.deploy.outputs.api_gateway_url }}/health || exit 1

  # Deploy to production environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, terraform-validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/lambdas/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: Terraform Init
        run: cd infrastructure && terraform init
        env:
          TF_VAR_environment: prod

      - name: Terraform Plan
        run: cd infrastructure && terraform plan -var-file=terraform.tfvars.prod
        env:
          TF_VAR_environment: prod

      - name: Terraform Apply
        id: deploy
        run: |
          cd infrastructure && terraform apply -var-file=terraform.tfvars.prod -auto-approve
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_environment: prod

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.api_gateway_url }}"
          # Add actual smoke test commands here
          curl -f ${{ steps.deploy.outputs.api_gateway_url }}/health || exit 1

      - name: Notify deployment
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "API Gateway URL: ${{ steps.deploy.outputs.api_gateway_url }}"