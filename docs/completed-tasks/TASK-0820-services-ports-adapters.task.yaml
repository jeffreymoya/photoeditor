# Lean template for LLM-executable tasks (token-optimized for solo developer)
# Subtask of TASK-0817: Frontend tier hardening
# Focus: Services layer - ports and adapters pattern

schema_version: "1.0"
id: TASK-0820
title: "Refactor mobile services to use ports and adapters with retry policies"
status: completed
blocked_reason: null
blocked_by: []
priority: P1
area: mobile

description: >-
  Part 3 of TASK-0817 frontend-tier hardening. Mobile ApiService and NotificationService
  currently expose concrete implementations directly. standards/frontend-tier.md requires
  100% of external calls behind interfaces in /services/*/port.ts with adapters using
  cockatiel for retry/circuit breaker policies. This subtask introduces port interfaces
  and adapter implementations, isolating platform APIs from feature and component layers.

outcome: >-
  ApiService and NotificationService refactored into port/adapter pairs. Port interfaces
  define contracts in mobile/src/services/upload/port.ts and mobile/src/services/notification/port.ts.
  Adapters use cockatiel retry policies. Feature layer depends only on port interfaces,
  enabling testability via stub implementations.

scope:
  in:
    - mobile/src/services/upload/port.ts (new interface)
    - mobile/src/services/upload/adapter.ts (refactored ApiService)
    - mobile/src/services/notification/port.ts (new interface)
    - mobile/src/services/notification/adapter.ts (refactored NotificationService)
    - mobile/src/services/__tests__/**/*.test.ts (updated tests)
    - mobile/src/features/upload/hooks/useUpload.ts (update to use port)
    - mobile/package.json (cockatiel dependency)
  out:
    - UI tokens/icons - covered by TASK-0818
    - RTK Query/XState - covered by TASK-0819
    - Storybook/Chromatic - covered by TASK-0821
    - Backend API contract changes

context:
  affected_packages: [mobile]
  standards_tier: mobile
  issues: []
  related_docs:
    - standards/AGENTS.md
    - standards/frontend-tier.md
    - standards/typescript.md
    - standards/testing-standards.md
  repo_paths:
    - mobile/src/services
    - mobile/src/features/upload
  dependencies:
    - type: package
      name: cockatiel
      version: ">=3.1.0"

environment:
  os: ubuntu-22.04
  runtimes:
    node: "18.x"
  tools:
    - name: npm
      version: "9.x"

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write
    network: enabled
  coding_guidelines:
    - Keep diffs minimal and focused
    - Respect repository conventions
  prohibited:
    - No secrets or tokens in code
    - No unrelated file changes
  architecture:
    - "Ports & Adapters (Hexagonal) for API/Notifications/Platform (standards/frontend-tier.md)"
    - "100% of external calls behind interface in /services/*/port.ts (standards/frontend-tier.md)"
    - "Retry + Circuit Breaker: cockatiel policy combinators (standards/frontend-tier.md)"

plan:
  - id: 1
    title: Install cockatiel dependency
    details: >-
      Add cockatiel to mobile dependencies to satisfy the retry + circuit breaker requirement in
      standards/frontend-tier.md#services--integration-layer.
    actor: agent
    inputs:
      - mobile/package.json
      - standards/frontend-tier.md
    outputs:
      - mobile/package.json
      - pnpm-lock.yaml
    definition_of_done:
      - mobile/package.json and pnpm-lock.yaml list cockatiel â‰¥3.1.0 under dependencies, referencing standards/frontend-tier.md#services--integration-layer in task notes.
    estimate: S
    expected_files_touched:
      - mobile/package.json
      - pnpm-lock.yaml
  - id: 2
    title: Define upload service port interface
    details: >-
      Introduce mobile/src/services/upload/port.ts so all upload API calls flow through a port per
      standards/frontend-tier.md#services--integration-layer fitness gate.
    actor: agent
    inputs:
      - mobile/src/services/ApiService.ts
      - standards/frontend-tier.md
      - standards/typescript.md
    outputs:
      - mobile/src/services/upload/port.ts
    definition_of_done:
      - mobile/src/services/upload/port.ts exports a named port type covering requestPresignedUrl, uploadImage, getJobStatus, and processImage with TSDoc referencing standards/frontend-tier.md#services--integration-layer and standards/typescript.md#language--api-surface-rules.
    estimate: S
    expected_files_touched:
      - mobile/src/services/upload/port.ts
  - id: 3
    title: Refactor ApiService into upload adapter
    details: >-
      Move ApiService logic into mobile/src/services/upload/adapter.ts that implements the new port while
      preserving dependency inversion mandated by standards/frontend-tier.md#services--integration-layer.
    actor: agent
    inputs:
      - mobile/src/services/upload/port.ts
      - mobile/src/services/ApiService.ts
      - standards/frontend-tier.md
    outputs:
      - mobile/src/services/upload/adapter.ts
      - mobile/src/services/ApiService.ts
    definition_of_done:
      - mobile/src/services/upload/adapter.ts implements the port and re-exports via index, and the legacy ApiService entry point is removed or delegates with deprecation note citing standards/frontend-tier.md#services--integration-layer.
    estimate: M
    expected_files_touched:
      - mobile/src/services/upload/adapter.ts
      - mobile/src/services/ApiService.ts
  - id: 4
    title: Add cockatiel retry policies to upload adapter
    details: >-
      Apply cockatiel policy combinators so each outbound request follows standards/frontend-tier.md#services--integration-layer retry + circuit breaker guidance.
    actor: agent
    inputs:
      - mobile/src/services/upload/adapter.ts
      - standards/frontend-tier.md
    outputs:
      - mobile/src/services/upload/adapter.ts
    definition_of_done:
      - Adapter methods wrap network calls in cockatiel policies and annotate decisions referencing standards/frontend-tier.md#services--integration-layer; unit coverage added to tests listed in docs/evidence/mobile-services-ports.md.
    estimate: S
    expected_files_touched:
      - mobile/src/services/upload/adapter.ts
  - id: 5
    title: Define notification service port interface
    details: >-
      Create mobile/src/services/notification/port.ts mirroring standards/frontend-tier.md#services--integration-layer requirement that notification integrations expose ports.
    actor: agent
    inputs:
      - mobile/src/services/NotificationService.ts
      - standards/frontend-tier.md
    outputs:
      - mobile/src/services/notification/port.ts
    definition_of_done:
      - Port file exports a named interface with registerToken and scheduleNotification signatures and TSDoc citing standards/frontend-tier.md#services--integration-layer.
    estimate: S
    expected_files_touched:
      - mobile/src/services/notification/port.ts
  - id: 6
    title: Refactor NotificationService into adapter
    details: >-
      Move NotificationService implementation behind the new port so feature layers never import Expo APIs directly, aligning with standards/frontend-tier.md#services--integration-layer and standards/typescript.md#4-modifiability.
    actor: agent
    inputs:
      - mobile/src/services/notification/port.ts
      - mobile/src/services/NotificationService.ts
      - standards/frontend-tier.md
    outputs:
      - mobile/src/services/notification/adapter.ts
      - mobile/src/services/NotificationService.ts
    definition_of_done:
      - Adapter implements the port, legacy NotificationService entry point removed or delegates with docstring referencing standards/frontend-tier.md#services--integration-layer, and type-checking confirms only ports leak to consumers (not Expo APIs).
    estimate: M
    expected_files_touched:
      - mobile/src/services/notification/adapter.ts
      - mobile/src/services/NotificationService.ts
  - id: 7
    title: Update feature hooks to depend on ports
    details: >-
      Rework feature hooks/contexts so upload flows inject the ports instead of concrete adapters, maintaining the separation noted in standards/frontend-tier.md#state--logic-layer and standards/frontend-tier.md#services--integration-layer.
    actor: agent
    inputs:
      - mobile/src/features/upload/hooks/useUpload.ts
      - mobile/src/services/upload/port.ts
      - standards/frontend-tier.md
    outputs:
      - mobile/src/features/upload/hooks/useUpload.ts
      - mobile/src/features/upload/context/ServiceContext.tsx
    definition_of_done:
      - Hooks consume injected port interfaces only, dependency graph check recorded in docs/evidence/mobile-services-ports.md with citation to standards/frontend-tier.md#state--logic-layer.
    estimate: M
    expected_files_touched:
      - mobile/src/features/upload/hooks/useUpload.ts
      - mobile/src/features/upload/context/ServiceContext.tsx
  - id: 8
    title: Update tests to use stub implementations
    details: >-
      Replace concrete service usage in tests with stub ports and document coverage per standards/testing-standards.md#test-authoring-guidelines.
    actor: agent
    inputs:
      - mobile/src/services/upload/port.ts
      - standards/testing-standards.md
    outputs:
      - mobile/src/services/upload/__tests__/adapter.test.ts
      - mobile/src/services/__tests__/stubs.ts
      - docs/evidence/mobile-services-ports.md
    definition_of_done:
      - Unit tests reference stub implementations only, coverage summary appended to docs/evidence/mobile-services-ports.md citing standards/testing-standards.md#coverage-expectations.
    estimate: M
    expected_files_touched:
      - mobile/src/services/upload/__tests__/adapter.test.ts
      - mobile/src/services/__tests__/stubs.ts
      - docs/evidence/mobile-services-ports.md

acceptance_criteria:
  - IUploadService port defines contract for all upload operations
  - INotificationService port defines contract for all notification operations
  - Adapters implement ports with cockatiel retry/circuit breaker policies
  - Feature layer depends only on port interfaces, not concrete adapters
  - Tests use stub port implementations; no direct network calls in unit tests
  - No lint/type/test regressions
  modularity:
    - "Adapters encapsulate platform APIs (standards/frontend-tier.md)"
    - "No direct Expo/Fetch usage in feature or component layers (standards/frontend-tier.md)"
  testability:
    - "Coverage thresholds per standards/testing-standards.md"

validation:
  static_checks:
    - pnpm turbo run qa:static --filter=photoeditor-mobile
    - test -f mobile/src/services/upload/port.ts
    - test -f mobile/src/services/notification/port.ts

  unit_tests:
    mobile:
      - pnpm turbo run test --filter=photoeditor-mobile -- --coverage

  contract_tests: []

  manual_checks:
    - Verify upload flow works with retry policies on poor network
    - Verify circuit breaker opens after repeated failures

  artifacts:
    - screenshots: []

deliverables:
  - mobile/src/services/upload/port.ts
  - mobile/src/services/upload/adapter.ts
  - mobile/src/services/notification/port.ts
  - mobile/src/services/notification/adapter.ts
  - mobile/src/features/upload/hooks/useUpload.ts
  - mobile/src/features/upload/context/ServiceContext.tsx
  - mobile/src/services/__tests__/stubs.ts
  - mobile/src/services/upload/__tests__/adapter.test.ts

risks:
  - description: Dependency injection pattern may increase complexity in React components
    mitigation: Use React Context for service injection; keep provider setup simple
  - description: cockatiel policies may introduce unexpected behavior if misconfigured
    mitigation: Test retry/circuit breaker behavior with stub implementations; document policy parameters
