# Lean template for LLM-executable tasks (token-optimized for solo developer)
# Copy to: tasks/<area>/TASK-<id>-<short-slug>.task.yaml
# See tasks/README.md for authoring guide
#
# Standards alignment:
# - standards/global.md (universal guardrails)
# - standards/AGENTS.md (tier taxonomy)
# - Tier-specific: backend-tier.md | frontend-tier.md | shared-contracts-tier.md | infrastructure-tier.md | cross-cutting.md
# - standards/testing-standards.md (coverage expectations)

schema_version: "1.0"
id: TASK-0000           # REPLACE: stable ID (e.g., TASK-0123)
title: "REPLACE: Short, action-oriented title"
status: todo            # todo | in_progress | blocked | completed
priority: P1            # P0 (urgent), P1 (soon), P2 (nice-to-have)
area: backend           # frontend | backend | infra | docs | ops | other

description: >-
  REPLACE: Brief context (2–4 sentences): what to build/fix, why it matters, key constraints.

outcome: >-
  REPLACE: Verifiable end state (e.g., users can X; tests Y pass; metric improves by N%).

scope:
  in:
    - REPLACE: repo paths and features in scope
  out:
    - REPLACE: task-specific exclusions
    # Standard exclusions: See standards/cross-cutting.md#hard-fail-controls

context:
  standards_tier: backend  # backend | frontend | shared | infra | ops (auto-includes global.md, AGENTS.md, testing-standards.md)
  issues: ["REPLACE: #123"]
  related_docs:
    - REPLACE: docs/design/feature-x.md  # task-specific only
  repo_paths:
    - REPLACE: src/module/a.ts
    - REPLACE: test/module/a.spec.ts
  dependencies:
    - type: package
      name: REPLACE
      version: ">=X <Y"

environment:
  os: ubuntu-22.04
  runtimes:
    node: "18.x"
  tools:
    - name: npm
      version: "9.x"

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write
    network: enabled
  coding_guidelines:
    - Keep diffs minimal and focused
    - Respect repository conventions
  prohibited:
    - No secrets or tokens in code
    - No unrelated file changes

plan:
  - id: 1
    title: Analyze current code paths
    details: Read files; confirm dependency boundaries.
    commands:
      - rg -n "REPLACE: key symbol" REPLACE: path
    expected_files_touched: []
  - id: 2
    title: Implement core change
    details: Apply minimal diffs; ensure handlers → services → adapters flow.
    commands: []
    expected_files_touched:
      - REPLACE: src/module/a.ts
  - id: 3
    title: Add/adjust tests
    details: Cover edge cases, error paths, idempotency; ensure coverage thresholds are met.
    commands:
      - npm run test:unit -- --coverage
    expected_files_touched:
      - REPLACE: test/module/a.spec.ts
  - id: 4
    title: Update docs
    details: Update usage docs; generate coverage reports if they change.
    commands:
      - npm run test:unit -- --coverage --coverageReporters=html
    expected_files_touched:
      - REPLACE: docs/usage/feature-x.md

acceptance_criteria:
  - REPLACE: Criterion 1 (clear, testable)
  - REPLACE: Criterion 2
  - No lint errors; CI scripts run clean
  # Tier-specific maintainability: See standards/<tier>-tier.md
  modularity:
    - "Handlers ≤75 LOC, complexity ≤10"
    - "Services ≤200 LOC, complexity ≤15"
    - "No cross-layer imports (dependency-cruiser enforced)"
  testability:
    - "Service/Adapter: Line ≥80%, Branch ≥70%"
    - "Contract tests pass for all routes"

validation:
  commands:
    # Hard fail prevention (standards/global.md + tier-specific)
    - "! grep -r '@aws-sdk' backend/src/lambdas/ || echo 'Handlers must not import SDK'"
    - npx dependency-cruiser --validate .dependency-cruiser.json src/

    # Complexity checks
    - npm run lint -- --max-complexity=10 --silent || true

    # Test execution with coverage
    - npm run test:unit -- --coverage --coverageThreshold='{"global":{"lines":80,"branches":70}}'
    - npm run test:contract || echo 'Contract tests failed'

    # Standard suite
    - npm run lint --silent || true
    - npm test --silent
  manual_checks:
    - REPLACE: Brief manual verification steps
  artifacts:
    - screenshots: []

deliverables:
  - REPLACE: src/module/a.ts
  - REPLACE: test/module/a.spec.ts
  - REPLACE: docs/usage/feature-x.md
  # Evidence: Generated by validation commands, captured in changelog

risks:
  # Standard risks: See standards/cross-cutting.md#hard-fail-scenarios
  - description: REPLACE: task-specific risk
    mitigation: REPLACE: detection/mitigation strategy

# Session logging: Update changelog/YYYY-MM-DD-short-topic.md after each session
