# Minimal template for simple tasks (bug fixes, small changes, doc updates)
# Copy to: tasks/<area>/TASK-<id>-<short-slug>.task.yaml
# Standards alignment: See standards/global.md, standards/AGENTS.md, standards/<tier>-tier.md
# If a blocker outside scope appears, mark status=blocked, fill blocked_reason,
# and create a dedicated unblocker task with this task listed under blocked_by.

schema_version: "1.0"
id: TASK-0000
title: "REPLACE: Short title"
status: todo
blocked_reason: null  # REQUIRED when status=blocked; describe external blocker triggering dedicated unblocker task
priority: P1
area: backend  # frontend | backend | infra | docs | ops

description: >-
  REPLACE: What to fix/build and why (1-2 sentences).

outcome: >-
  REPLACE: Verifiable end state.

scope:
  in:
    - REPLACE: files in scope
  out:
    # Standard exclusions: standards/cross-cutting.md#hard-fail-controls

context:
  affected_packages: [backend]  # backend | mobile | shared | infra (guides test agent spawning)
  standards_tier: backend  # Auto-includes global, AGENTS, testing-standards
  repo_paths:
    - REPLACE: src/file.ts

plan:
  - id: 1
    title: Implement change
    expected_files_touched:
      - REPLACE: src/file.ts
  - id: 2
    title: Test
    commands:
      - pnpm turbo run test --filter=@photoeditor/backend -- --testPathPattern=REPLACE

acceptance_criteria:
  - REPLACE: What must be true when done
  - Tests pass; no lint errors

validation:
  commands:
    - pnpm turbo run lint --filter=@photoeditor/backend --silent
    - pnpm turbo run test --filter=@photoeditor/backend --silent

deliverables:
  - REPLACE: src/file.ts
  # Evidence: In changelog

# Agent output artifacts:
# - task-picker writes: .agent-output/task-picker-summary-{TASK-ID}.md (work summary)
# - test agents write: docs/tests/reports/YYYY-MM-DD-{agent-type}.md (validation results)
# - task-runner creates: changelog/YYYY-MM-DD-{topic}.md (final changelog aggregating all above)
