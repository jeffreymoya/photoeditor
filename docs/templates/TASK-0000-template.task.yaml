# Single task template for LLM-executable work
# Copy to tasks/<area>/TASK-<id>-<slug>.task.yaml and replace every REPLACE placeholder.
# Delete comment lines you have satisfied, but keep all YAML keys so automation stays stable.
# If the effort feels wider than one independently shippable change, stop and split it into
# multiple task files before continuing.

schema_version: "1.0"
id: TASK-0000                    # REPLACE: stable ID (e.g., TASK-0123)
title: "REPLACE: action-oriented title"
status: todo                     # todo | in_progress | blocked | completed
blocked_reason: null             # REQUIRED when status=blocked; explain the external dependency
priority: P1                     # P0 | P1 | P2
area: backend                    # backend | frontend | mobile | shared | infra | docs | ops | other
order: null                      # Optional: execution order for orchestration
blocked_by: []                   # Optional: dependent task IDs

description: >-
  REPLACE: Provide concise context (2â€“5 sentences). Include business value, constraints,
  and any assumptions. Link to prior work so the task is self-contained.

outcome: >-
  REPLACE: State the measurable end state. Describe what success looks like without listing steps.

scope:
  in:
    - REPLACE: files, modules, or behaviours in scope
  out:
    - REPLACE: explicit exclusions that prevent scope creep

context:
  affected_packages: [backend]    # Adjust packages to drive test automation; leave [] if none
  standards_tier: backend         # backend | frontend | mobile | shared | infra | docs | ops
  related_docs:
    - standards/global.md
    - standards/AGENTS.md
    - standards/testing-standards.md
    - REPLACE: standards/<tier>-tier.md
    - REPLACE: docs/design/<reference>.md
  repo_paths:
    - REPLACE: approximate file path or directory touched
  dependencies: []                # List external services/packages or remove if unused

environment:
  os: ubuntu-22.04
  runtimes:
    node: "20.x"                  # Update or remove runtimes that do not apply
  tools:
    - name: pnpm
      version: "8.x"
  data: []                        # Optional sample data or fixtures required

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write
    network: enabled
  coding_guidelines:
    - Keep diffs minimal and focused on the described scope.
    - Follow repository standards referenced above.
  prohibited:
    - No secrets or credentials in source control.

plan:
  - id: 1
    title: Understand baseline
    details: REPLACE: audit current implementation, note risks, confirm interfaces.
    commands:
      - REPLACE: helpful read-only command (e.g., rg -n "symbol" path)
    expected_files_touched: []
  - id: 2
    title: Implement change
    details: REPLACE: describe the core implementation approach.
    commands: []
    expected_files_touched:
      - REPLACE: primary file(s)
  - id: 3
    title: Validate and document
    details: REPLACE: cover automated checks and documentation updates.
    commands:
      - pnpm turbo run qa:static --filter=@photoeditor/backend
    expected_files_touched:
      - REPLACE: docs or evidence paths

acceptance_criteria:
  must:
    - REPLACE: objective behaviour that can be validated in code/tests
    - REPLACE: additional check (logs, metrics, UX outcome)
  quality_gates:
    - Tests meet referenced coverage thresholds per standards/testing-standards.md.
    - No lint/type errors in affected packages.

validation:
  static_checks:
    - pnpm turbo run qa:static --filter=@photoeditor/backend
  unit_tests:
    backend:
      - pnpm turbo run test --filter=@photoeditor/backend -- --coverage --coverageThreshold='{"global":{"lines":80,"branches":70}}'
    # shared:
    #   - pnpm turbo run test --filter=@photoeditor/shared
    # mobile:
    #   - pnpm turbo run test --filter=photoeditor-mobile
  contract_tests: []              # Add commands if shared contracts change
  manual_checks:
    - REPLACE: brief manual verification, or remove if not needed

artifacts:
  - path: REPLACE: docs/evidence/<artifact>.json
    description: REPLACE: what the artifact demonstrates

deliverables:
  - REPLACE: primary source file(s)
  - REPLACE: test file(s)
  - REPLACE: documentation or evidence updates

risks:
  - description: REPLACE: meaningful risk (e.g., performance regression, contract drift)
    mitigation: REPLACE: how it will be detected/mitigated (tests, flags, monitoring)
