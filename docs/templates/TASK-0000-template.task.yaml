# Template for LLM-executable tasks
# Copy to: tasks/<area>/TASK-<id>-<short-slug>.task.yaml and fill all placeholders.
#
# This template is aligned with tier-specific standards in standards/ directory:
# - standards/global.md (universal guardrails: Ports & Adapters, neverthrow, XState, complexity budgets)
# - standards/AGENTS.md (tier taxonomy overview and standards map)
# - Tier-specific standards (choose based on `area` field):
#   - area: backend → standards/backend-tier.md (Edge, Lambda, Domain, Provider, Shared Utils, Platform layers)
#   - area: frontend → standards/frontend-tier.md (UI, State, Services, Platform layers)
#   - area: shared → standards/shared-contracts-tier.md (Zod SSOT, versioning, client generation)
#   - area: infra → standards/infrastructure-tier.md (Terraform, SST, LocalStack)
#   - area: ops → standards/cross-cutting.md (Observability, DX, Governance)
# - docs/testing-standards.md (test coverage expectations and validation)
#
# All sections must cite the applicable tier standards files so they become explicit task inputs.

schema_version: "1.0"  # Do not change unless schema changes
id: TASK-0000           # REPLACE: stable ID (e.g., TASK-0123)
title: "REPLACE: Short, action-oriented title"
status: todo            # todo | in_progress | blocked | completed
priority: P1            # P0 (urgent), P1 (soon), P2 (nice-to-have)
area: backend           # frontend | backend | infra | docs | ops | other

description: >-
  REPLACE: Brief but complete context (2–6 sentences): what to build/fix,
  why it matters, key constraints, relevant history, and assumptions.

outcome: >-
  REPLACE: Verifiable end state, not steps (e.g., users can X; tests Y pass;
  file Z exists; metric improves by N%).

scope:
  in:
    - REPLACE: repo paths and features in scope (e.g., src/editor/crop.ts)
  out:
    - REPLACE: explicit exclusions to avoid scope creep
    # standards/global.md: Hard-fail controls (update with tier-specific citations)
    - "Direct SDK usage in handlers (use adapters)"
    - "Breaking API changes without /v{n} version bump"
    - "Handler code exceeding 75 LOC or complexity >10"
    - "VPC configuration for API Lambdas"
    - "Inline secrets or hardcoded credentials"
    - "SQS queues without DLQ configuration"
    - "Cross-feature imports in mobile (violates modularity)"
    - "Dependency cycles between modules"
    - "Manual-only tests (all tests must run in CI)"

context:
  issues: ["REPLACE: #123"]
  related_docs:
    - standards/global.md  # REQUIRED: universal guardrails (Ports & Adapters, neverthrow, XState, complexity budgets)
    - standards/AGENTS.md  # REQUIRED: tier taxonomy overview
    # REQUIRED: Choose tier-specific standard(s) matching `area` field:
    - REPLACE: standards/backend-tier.md      # If area: backend (Edge & Interface, Lambda Application, Domain Service, Provider Integration, Shared Backend Utilities, Platform & Quality)
    - REPLACE: standards/frontend-tier.md     # If area: frontend (UI Components, State & Logic, Services & Integration, Platform & Delivery)
    - REPLACE: standards/shared-contracts-tier.md  # If area: shared (Zod SSOT, OpenAPI, versioning, client generation)
    - REPLACE: standards/infrastructure-tier.md    # If area: infra (Terraform, Terragrunt, SST, LocalStack)
    - REPLACE: standards/cross-cutting.md          # If area: ops or cross-cutting concerns (Observability, DX, Governance)
    - docs/testing-standards.md  # REQUIRED: validation expectations
    - REPLACE: docs/design/feature-x.md
  repo_paths:
    - REPLACE: src/module/a.ts
    - REPLACE: test/module/a.spec.ts
  dependencies:
    - type: package
      name: REPLACE: package-name
      version: ">=X <Y"
    - type: service
      name: REPLACE: service-name
      requirement: optional

environment:
  os: ubuntu-22.04
  runtimes:
    node: "18.x"     # REPLACE if different
    python: "3.11"   # Remove if not needed
  tools:
    - name: npm
      version: "9.x"
    - name: bash
      version: any
  data:
    - sample.jpg  # Example input asset if applicable

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write   # read-only | workspace-write | danger-full-access
    network: enabled              # enabled | restricted
  coding_guidelines:
    - Keep diffs minimal and focused on the task.
    - Respect repository conventions and structure.
  prohibited:
    - Do not commit secrets or tokens.
    - Do not change unrelated files.
  architecture:
    # standards/global.md: Universal guardrails
    - "Ports & Adapters (Hexagonal) pattern across services, providers, and platform"
    - "neverthrow Result/Either for domain flows (no exceptions for control flow)"
    - "XState for long-running lifecycles (shared/statecharts as SSOT)"
    - "Schema-First (Zod) with codegen; class-validator requires exception entry"
    - "No dependency cycles anywhere (dependency-cruiser enforced)"
    - "Cyclomatic complexity budgets per tier (tracked via ESLint rules)"

    # Tier-specific hard-fail guardrails (REPLACE with citations from tier standards):
    # standards/backend-tier.md (if area: backend):
    - "No controller/handler invokes AWS SDK directly (Edge & Interface: depcruise rule)"
    - "Controller → UseCase(Service) → Port(Adapter) pattern (Edge & Interface)"
    - "Function-per-concern with input/output schemas (Lambda Application)"
    - "Idempotency enabled on mutating handlers (Lambda Application)"
    - "Cold-start P50 ≤ published budget; Lambda zip < 5–10 MB (Lambda Application)"
    - "Pure units (no I/O) ≥ 70% of domain code (Domain Service)"
    - "Provider can be toggled via flag; CI tests against stubbed provider (Provider Integration)"
    - "Single errors/ catalog with code uniqueness enforced (Shared Backend Utilities)"
    - "Mutation ≥ 60% now → 80% later; unit ≥ 80% line; integration ≥ 60% (Platform & Quality)"

    # standards/frontend-tier.md (if area: frontend):
    - "Radix UI (web) or Tamagui (native) over design tokens; Atomic Design (UI Components)"
    - "Story coverage ≥ 85% of atoms/molecules with Chromatic gate (UI Components)"
    - "Redux Toolkit + RTK Query for server state; XState for state machines (State & Logic)"
    - "Reducer cyclomatic complexity ≤ 10 (State & Logic)"
    - "100% of external calls behind interface in /services/*/port.ts (Services & Integration)"
    - "Contract drift check: generated client hash must match server hash (Services & Integration)"
    - "E2E happy-path on CI (Detox); navigation coverage ≥ 1 path per screen (Platform & Delivery)"

    # standards/shared-contracts-tier.md (if area: shared):
    - "Zod as SSOT → OpenAPI/TypeScript/clients via codegen; orval requires ADR"
    - "API diff must be reviewed; semantic versioning with approval"
    - "Downstream clients regenerated in CI with checksum artifact"

    # standards/infrastructure-tier.md (if area: infra):
    - "Terraform with tfenv, pre-commit, tflint, checkov, terrascan"
    - "terraform validate/plan artifacts stored; drift check weekly"
    - "Policy as Code: OPA/Conftest or Terraform Cloud policies"
    - "Infrastructure tests (Terratest) on critical modules"

    # standards/cross-cutting.md (if area: ops):
    - "Trace Context Propagation: inject trace id into every log; front→back correlation (Observability)"
    - "100% of incoming requests carry a correlation id (Observability)"
    - "Task time budgets: build < 3 min, unit < 2 min (Developer Experience)"
    - "Evidence bundle on PR: contract diff, dep graph, test matrix, mutation report, ADR (Governance)"

plan:
  - id: 1
    title: Analyze current code paths and architecture
    details: Read referenced files; confirm integration points, dependencies, and layer boundaries.
    commands:
      - rg -n "REPLACE: key symbol or function" REPLACE: path
      - npx dependency-cruiser --output-type dot src/ | dot -T png > docs/evidence/import-graph-before.png
    expected_files_touched: []
  - id: 2
    title: Implement core change following architectural patterns
    details: Apply minimal diffs; ensure handlers → services → adapters flow; keep handlers thin.
    commands: []
    expected_files_touched:
      - REPLACE: src/module/a.ts
    architecture_checklist:
      - "Handler code ≤75 LOC, complexity ≤10"
      - "Service code ≤200 LOC, complexity ≤15"
      - "No SDK imports in handlers (use adapters)"
      - "Structured logging with correlationId, traceId"
      - "W3C traceparent propagation on async calls"
  - id: 3
    title: Add/adjust tests with coverage thresholds
    details: Ensure edge cases, error paths, and idempotency are covered; meet mutation score ≥60%.
    commands:
      - npm run test:handlers -- --coverage
      - npm run test:services -- --coverage --coverageThreshold='{"global":{"lines":80,"branches":70}}'
      - npm run test:mutation -- --threshold 60
      - npm run test:contract
    expected_files_touched:
      - REPLACE: test/module/a.spec.ts
  - id: 4
    title: Validate infrastructure and security
    details: Verify DLQ config, encryption, tags, and no hard-fail violations.
    commands:
      - cd infrastructure && terraform fmt -check && terraform validate && terraform plan
      - tfsec infrastructure/ --soft-fail
      - checkov -d infrastructure/ --soft-fail
      - "! grep -r '@aws-sdk' backend/src/lambdas/"
      - grep -q "aws_sqs_queue.*dead_letter" infrastructure/modules/messaging/
      - grep -q "SSE-KMS" infrastructure/modules/storage/
  - id: 5
    title: Update docs and generate evidence bundle
    details: Update usage docs; generate import graphs, coverage reports, mutation reports.
    commands:
      - npx dependency-cruiser --output-type dot src/ | dot -T png > docs/evidence/import-graph.png
      - npm run test:services -- --coverage --coverageReporters=html
      - npm run test:mutation -- --coverageReporters=html
    expected_files_touched:
      - REPLACE: docs/usage/feature-x.md
      - docs/evidence/import-graph.png
      - docs/evidence/coverage/services-coverage.html
      - docs/evidence/mutation/services-mutation.html

acceptance_criteria:
  - REPLACE: Criterion 1 (clear, testable, and repo-verifiable)
  - REPLACE: Criterion 2
  - No lint errors; CI scripts run clean locally if available.
  # Tier-specific maintainability requirements (REPLACE with citations from tier standards):
  modularity:
    - "Handlers ≤75 LOC and cyclomatic complexity ≤10 (target ≤5)"
    - "Services/Adapters ≤200 LOC and complexity ≤15 (target ≤8)"
    - "Module cyclomatic complexity ≤50"
    - "Handlers only call one service method (thin glue layer)"
    - "No cross-layer imports (handlers → services → adapters flow enforced)"
  reusability:
    - "Shared logic extracted to packages/fp-core, error, or observability"
    - "No duplication of adapter patterns (reuse existing factories)"
  analysability:
    - "Structured JSON logs with correlationId, traceId, requestId, jobId, userId, function, env, version"
    - "W3C traceparent propagated on all async/downstream calls"
    - "Log retention configured (90d prod, 30d staging, 14d dev)"
    - "Alarms configured: Lambda errors >0 for 5m, API 5XX >1% for 5m, SQS age >120s, DLQ inflow >0"
  modifiability:
    - "Breaking API changes use /v{n} versioning with migration doc"
    - "Feature flags (if any) registered with expiry ≤90 days"
  testability:
    - "Service layer: Line coverage ≥80%, Branch ≥70%, Mutation score ≥60%"
    - "Adapter layer: Line coverage ≥80%, Branch ≥70%, Mutation score ≥60%"
    - "Contract tests pass for all API routes (old↔new compatibility)"
    - "SQS worker idempotency tested (duplicate message handling)"
    - "DLQ redrive drill documented and automated"
  hard_fail_prevention:
    - "No handler imports @aws-sdk/* or database clients (verified by grep)"
    - "API Lambdas have no vpc_config in Terraform"
    - "All SQS queues have DLQ configured"
    - "Final S3 buckets use SSE-KMS with CMK"
    - "Secrets stored in SSM SecureString or Secrets Manager"
    - "All resources tagged: Project, Env, Owner, CostCenter"
    - "dependency-cruiser validation passes (no cycles, layer violations)"

validation:
  commands:
    # Hard fail prevention (cite standards/global.md + tier-specific standards)
    - "! grep -r '@aws-sdk' backend/src/lambdas/ || echo 'Handlers must not import SDK'"
    - "! grep -A5 'resource \"aws_lambda_function\".*api' infrastructure/ | grep vpc_config || echo 'API Lambdas must not be in VPC'"
    - grep -q "aws_sqs_queue.*dead_letter" infrastructure/modules/messaging/ || echo 'SQS requires DLQ'
    - grep -q "SSE-KMS" infrastructure/modules/storage/ || echo 'Final S3 requires SSE-KMS'
    - grep -q "aws_ssm_parameter.*type.*SecureString" infrastructure/ || echo 'Secrets require SSM SecureString'

    # Dependency and architecture validation
    - npx dependency-cruiser --validate .dependency-cruiser.json src/

    # Complexity checks
    - npm run lint -- --max-complexity=10 --silent || true

    # Test execution with coverage thresholds
    - npm run test:handlers -- --coverage --coverageThreshold='{"global":{"lines":80,"branches":70}}'
    - npm run test:services -- --coverage --coverageThreshold='{"global":{"lines":80,"branches":70}}'
    - npm run test:mutation -- --threshold 60 || echo 'Mutation score below 60%'
    - npm run test:contract || echo 'Contract tests failed'

    # Infrastructure validation
    - cd infrastructure && terraform fmt -check && terraform validate
    - tfsec infrastructure/ --soft-fail || echo 'tfsec violations detected'
    - checkov -d infrastructure/ --soft-fail || echo 'checkov violations detected'

    # Standard test suite
    - npm run lint --silent || true
    - npm test --silent
  manual_checks:
    - REPLACE: Brief manual verification steps (e.g., open the app and do X)
    - "Verify structured logs contain correlationId, traceId in CloudWatch"
    - "Verify alarms configured in AWS Console (Lambda errors, API 5XX, SQS age, DLQ inflow)"
    - "Verify resource tags present: Project, Env, Owner, CostCenter"
  artifacts:
    - screenshots: []

deliverables:
  - REPLACE: src/module/a.ts
  - REPLACE: test/module/a.spec.ts
  - REPLACE: docs/usage/feature-x.md
  # Tier-specific evidence requirements (cite relevant tier standards):
  evidence:
    architecture:
      - path: docs/evidence/import-graph.png
        description: "Dependency graph showing handlers → services → adapters flow"
      - path: docs/evidence/dependency-cruiser-report.json
        description: "dependency-cruiser validation output (no cycles, layer compliance)"
    api:
      - path: docs/evidence/openapi-spec.yaml
        description: "Updated OpenAPI spec for API routes"
      - path: docs/evidence/contract-tests/compatibility-matrix.md
        description: "Old↔new client/server compatibility results"
    observability:
      - path: docs/evidence/logs/powertools-sample.json
        description: "Sample structured log with correlationId, traceId, requestId, jobId"
      - path: docs/evidence/alarms/lambda-errors.yaml
        description: "Alarm configuration for Lambda errors, API 5XX, SQS age, DLQ inflow"
    quality:
      - path: docs/evidence/coverage/services-coverage.html
        description: "Service layer coverage report (≥80% lines, ≥70% branches)"
      - path: docs/evidence/mutation/services-mutation.html
        description: "Service layer mutation report (≥60% score)"
      - path: docs/evidence/complexity/metrics.json
        description: "Cyclomatic complexity report (handlers ≤10, services ≤15, module ≤50)"
    infrastructure:
      - path: docs/evidence/terraform/plan-output.txt
        description: "terraform plan showing encryption, DLQ, tags"
      - path: docs/evidence/security/tfsec-report.json
        description: "tfsec scan results"
      - path: docs/evidence/security/checkov-report.json
        description: "checkov scan results"

risks:
  - description: REPLACE: risk description (e.g., performance regressions)
    mitigation: REPLACE: how to detect/mitigate (tests, profiling, flags)
  # Tier-specific hard-fail risk scenarios (REPLACE with tier standards citations):
  - description: "Handler imports SDK/DB client (hard fail)"
    mitigation: "grep validation in CI; fail build if @aws-sdk/* found in handlers/"
  - description: "API Lambda placed in VPC (cold start degradation)"
    mitigation: "terraform plan review; verify no vpc_config for API lambdas"
  - description: "SQS queue without DLQ (message loss)"
    mitigation: "terraform validate DLQ presence; automated redrive drill per release"
  - description: "Dependency cycle introduced (violates modularity)"
    mitigation: "dependency-cruiser in CI; fail on cycle detection"
  - description: "Breaking API change without versioning (client breakage)"
    mitigation: "OpenAPI semantic diff; require /v{n} for breaking changes"
  - description: "Missing structured logs (analysability degradation)"
    mitigation: "grep for correlationId in handler code; CloudWatch Insights query validation"
  - description: "Complexity budget exceeded (maintainability decline)"
    mitigation: "ESLint complexity rules; fail >10 handlers, >15 services, >50 module"
  - description: "Insufficient test coverage (quality gate failure)"
    mitigation: "Jest coverage thresholds; mutation testing ≥60% for services/adapters"
  - description: "Secrets exposed in code (security breach)"
    mitigation: "gitleaks pre-commit hook; SSM SecureString enforcement in terraform"
  - description: "Missing encryption on S3 (compliance violation)"
    mitigation: "tfsec/checkov scans; verify SSE-KMS with CMK in terraform plan"

# Session logging requirement:
# After each working session (regardless of completion), add/update a file in
# `changelog/` named `YYYY-MM-DD-short-topic.md` following `changelog/AGENTS.md`.
