<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="42" failures="0" errors="0" time="7.343">
  <testsuite name="ApiService - Shared Schema Integration" errors="0" failures="0" skipped="0" timestamp="2025-10-21T07:20:40" time="0.364" tests="18">
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Request Presigned URL should validate request body using PresignUploadRequestSchema" name="ApiService - Shared Schema Integration Schema Validation - Request Presigned URL should validate request body using PresignUploadRequestSchema" time="0.031">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Request Presigned URL should reject invalid request data that violates schema" name="ApiService - Shared Schema Integration Schema Validation - Request Presigned URL should reject invalid request data that violates schema" time="0.014">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Request Presigned URL should reject invalid response data that violates schema" name="ApiService - Shared Schema Integration Schema Validation - Request Presigned URL should reject invalid response data that violates schema" time="0.017">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Job Status should validate job status response using JobSchema" name="ApiService - Shared Schema Integration Schema Validation - Job Status should validate job status response using JobSchema" time="0.002">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Job Status should validate all possible job statuses" name="ApiService - Shared Schema Integration Schema Validation - Job Status should validate all possible job statuses" time="0.004">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Job Status should reject invalid job status" name="ApiService - Shared Schema Integration Schema Validation - Job Status should reject invalid job status" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Batch Upload should validate batch upload request using BatchUploadRequestSchema" name="ApiService - Shared Schema Integration Schema Validation - Batch Upload should validate batch upload request using BatchUploadRequestSchema" time="0.003">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Batch Upload should reject batch request with too many files" name="ApiService - Shared Schema Integration Schema Validation - Batch Upload should reject batch request with too many files" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Batch Upload should reject batch request with empty files array" name="ApiService - Shared Schema Integration Schema Validation - Batch Upload should reject batch request with empty files array" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Batch Job Status should validate batch job status using BatchJobSchema" name="ApiService - Shared Schema Integration Schema Validation - Batch Job Status should validate batch job status using BatchJobSchema" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Device Token Registration should validate device token request using DeviceTokenRegistrationSchema" name="ApiService - Shared Schema Integration Schema Validation - Device Token Registration should validate device token request using DeviceTokenRegistrationSchema" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Device Token Registration should reject invalid platform values" name="ApiService - Shared Schema Integration Schema Validation - Device Token Registration should reject invalid platform values" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Schema Validation - Device Token Registration should validate device token deactivation response" name="ApiService - Shared Schema Integration Schema Validation - Device Token Registration should validate device token deactivation response" time="0">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Contract Drift Prevention should use shared schemas directly without local copies" name="ApiService - Shared Schema Integration Contract Drift Prevention should use shared schemas directly without local copies" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration Contract Drift Prevention should not re-export shared schemas from mobile modules" name="ApiService - Shared Schema Integration Contract Drift Prevention should not re-export shared schemas from mobile modules" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration API Error Handling should throw error on non-ok HTTP response" name="ApiService - Shared Schema Integration API Error Handling should throw error on non-ok HTTP response" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration API Error Handling should throw error on network failure" name="ApiService - Shared Schema Integration API Error Handling should throw error on network failure" time="0.001">
    </testcase>
    <testcase classname="ApiService - Shared Schema Integration API Error Handling should throw error on schema validation failure" name="ApiService - Shared Schema Integration API Error Handling should throw error on schema validation failure" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="preprocessing utilities" errors="0" failures="0" skipped="0" timestamp="2025-10-21T07:20:40" time="0.432" tests="9">
    <testcase classname="preprocessing utilities needsResize returns false for images within max dimension" name="preprocessing utilities needsResize returns false for images within max dimension" time="0.003">
    </testcase>
    <testcase classname="preprocessing utilities needsResize returns true for images exceeding max dimension" name="preprocessing utilities needsResize returns true for images exceeding max dimension" time="0">
    </testcase>
    <testcase classname="preprocessing utilities needsResize handles exact boundary case" name="preprocessing utilities needsResize handles exact boundary case" time="0">
    </testcase>
    <testcase classname="preprocessing utilities needsResize uses default max dimension of 4096" name="preprocessing utilities needsResize uses default max dimension of 4096" time="0.001">
    </testcase>
    <testcase classname="preprocessing utilities isHEIC detects HEIC from file extension" name="preprocessing utilities isHEIC detects HEIC from file extension" time="0">
    </testcase>
    <testcase classname="preprocessing utilities isHEIC detects HEIF from file extension" name="preprocessing utilities isHEIC detects HEIF from file extension" time="0.001">
    </testcase>
    <testcase classname="preprocessing utilities isHEIC detects HEIC from MIME type" name="preprocessing utilities isHEIC detects HEIC from MIME type" time="0">
    </testcase>
    <testcase classname="preprocessing utilities isHEIC returns false for non-HEIC images" name="preprocessing utilities isHEIC returns false for non-HEIC images" time="0">
    </testcase>
    <testcase classname="preprocessing utilities isHEIC handles missing MIME type" name="preprocessing utilities isHEIC handles missing MIME type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="retry utilities" errors="0" failures="0" skipped="0" timestamp="2025-10-21T07:20:40" time="6.928" tests="15">
    <testcase classname="retry utilities calculateBackoffDelay calculates exponential backoff correctly" name="retry utilities calculateBackoffDelay calculates exponential backoff correctly" time="0.004">
    </testcase>
    <testcase classname="retry utilities calculateBackoffDelay respects max delay cap" name="retry utilities calculateBackoffDelay respects max delay cap" time="0.001">
    </testcase>
    <testcase classname="retry utilities calculateBackoffDelay applies jitter when enabled" name="retry utilities calculateBackoffDelay applies jitter when enabled" time="0.004">
    </testcase>
    <testcase classname="retry utilities calculateBackoffDelay uses default options when not specified" name="retry utilities calculateBackoffDelay uses default options when not specified" time="0.001">
    </testcase>
    <testcase classname="retry utilities withRetry succeeds on first attempt" name="retry utilities withRetry succeeds on first attempt" time="0.001">
    </testcase>
    <testcase classname="retry utilities withRetry retries on failure and eventually succeeds" name="retry utilities withRetry retries on failure and eventually succeeds" time="2.399">
    </testcase>
    <testcase classname="retry utilities withRetry throws after max retries exhausted" name="retry utilities withRetry throws after max retries exhausted" time="2.033">
    </testcase>
    <testcase classname="retry utilities withRetry does not retry non-retryable errors" name="retry utilities withRetry does not retry non-retryable errors" time="0.001">
    </testcase>
    <testcase classname="retry utilities withRetry calls onRetry callback" name="retry utilities withRetry calls onRetry callback" time="0.594">
    </testcase>
    <testcase classname="retry utilities withRetry retries 5xx server errors by default" name="retry utilities withRetry retries 5xx server errors by default" time="0.873">
    </testcase>
    <testcase classname="retry utilities withRetry retries 429 Too Many Requests by default" name="retry utilities withRetry retries 429 Too Many Requests by default" time="0.793">
    </testcase>
    <testcase classname="retry utilities createRetryState creates initial retry state" name="retry utilities createRetryState creates initial retry state" time="0.001">
    </testcase>
    <testcase classname="retry utilities createRetryState uses default maxAttempts" name="retry utilities createRetryState uses default maxAttempts" time="0">
    </testcase>
    <testcase classname="retry utilities updateRetryState updates state after failed attempt" name="retry utilities updateRetryState updates state after failed attempt" time="0">
    </testcase>
    <testcase classname="retry utilities updateRetryState sets isRetrying to false when max attempts reached" name="retry utilities updateRetryState sets isRetrying to false when max attempts reached" time="0.001">
    </testcase>
  </testsuite>
</testsuites>