#!/usr/bin/env node
/**
 * Format Contract Diff for PR Comments
 *
 * Reads the contract-diff.json artifact generated by contract-check.js
 * and formats it as a GitHub PR comment in Markdown format.
 *
 * This implements the governance automation required by standards/shared-contracts-tier.md
 * to surface contract changes to reviewers.
 *
 * Usage:
 *   node scripts/ci/format-contract-diff.js [--file path/to/contract-diff.json]
 *
 * Outputs markdown to stdout that can be posted as a PR comment.
 */

const fs = require('fs');
const path = require('path');

// Parse command line args
const args = process.argv.slice(2);
const fileArgIndex = args.indexOf('--file');
const diffFilePath = fileArgIndex >= 0 && args[fileArgIndex + 1]
  ? args[fileArgIndex + 1]
  : path.join(__dirname, '../../contract-diff.json');

if (!fs.existsSync(diffFilePath)) {
  console.error('No contract diff file found. This means no contract drift was detected.');
  process.exit(0);
}

try {
  const diffArtifact = JSON.parse(fs.readFileSync(diffFilePath, 'utf8'));

  // Generate markdown comment
  let markdown = '## Contract Drift Detected\n\n';
  markdown += ':warning: **API contracts have changed.** Review required before merge.\n\n';

  markdown += '### Summary\n\n';
  markdown += `- **Previous snapshot**: ${diffArtifact.previousSnapshot}\n`;
  markdown += `- **Current snapshot**: ${diffArtifact.currentSnapshot}\n`;
  markdown += `- **Requires changeset**: ${diffArtifact.requiresChangeset ? 'Yes' : 'No'}\n\n`;

  const { differences } = diffArtifact;

  if (differences.added.length > 0) {
    markdown += '### Added Files\n\n';
    markdown += '```diff\n';
    differences.added.forEach(file => {
      markdown += `+ ${file}\n`;
    });
    markdown += '```\n\n';
  }

  if (differences.removed.length > 0) {
    markdown += '### Removed Files\n\n';
    markdown += '```diff\n';
    differences.removed.forEach(file => {
      markdown += `- ${file}\n`;
    });
    markdown += '```\n\n';
  }

  if (differences.modified.length > 0) {
    markdown += '### Modified Files\n\n';
    markdown += '```diff\n';
    differences.modified.forEach(file => {
      markdown += `~ ${file}\n`;
    });
    markdown += '```\n\n';
  }

  markdown += '### Governance Checklist\n\n';
  markdown += 'Before approving this PR, verify:\n\n';
  markdown += '- [ ] **Breaking changes** are documented and require `/v{n}` versioning (see `docs/compatibility/versioning.md`)\n';
  markdown += '- [ ] **Backward compatibility tests** pass for schema modifications\n';
  markdown += '- [ ] **Contract tests** pass: `pnpm turbo run test:contract --filter=@photoeditor/backend`\n';
  markdown += '- [ ] **Version updated** if breaking: `npm version [major|minor|patch] --prefix shared`\n';
  markdown += '- [ ] **Changeset added** for contract changes (if using changesets)\n';
  markdown += '- [ ] **Migration guide** updated in `docs/migrations/` (if breaking)\n\n';

  markdown += '### Actions Required\n\n';
  markdown += '1. Review changes: `git diff shared/`\n';
  markdown += '2. Run compatibility tests: `pnpm turbo run test:contract --filter=@photoeditor/backend`\n';
  markdown += '3. Update snapshot if intentional: `pnpm turbo run contracts:check --filter=@photoeditor/shared -- --update`\n';
  markdown += '4. Update version if breaking: `npm version [major|minor|patch] --prefix shared`\n\n';

  markdown += '### References\n\n';
  markdown += '- [Versioning Policy](docs/compatibility/versioning.md)\n';
  markdown += '- [Shared Contracts Standards](standards/shared-contracts-tier.md)\n';
  markdown += '- [TypeScript Standards](standards/typescript.md)\n';
  markdown += '- [Testing Standards](standards/testing-standards.md)\n\n';

  markdown += '---\n';
  markdown += '_This comment was automatically generated by contract governance automation._\n';

  console.log(markdown);
  process.exit(0);

} catch (error) {
  console.error('Error formatting contract diff:', error.message);
  process.exit(1);
}
