schema_version: "1.0"
id: TASK-0814
title: "Enforce backend domain Result purity gate"
status: completed
priority: P1
area: backend

description: >-
  Build an automated fitness function that scans backend domain modules to ensure exported
  functions return neverthrow Result/ResultAsync types, avoid throwing exceptions, and do
  not import infrastructure libraries. Surface violations during QA and emit an evidence
  report for the bundle so domain purity regressions fail fast per backend standards.

outcome: >-
  `pnpm --filter @photoeditor/backend run qa:static` fails when domain modules violate purity
  rules, and `docs/evidence/domain-purity.json` captures pass/fail details for the release
  evidence bundle.

scope:
  in:
    - scripts/ci/check-domain-purity.mjs
    - backend/package.json (qa:static hook)
    - scripts/evidence-bundle (run check during evidence collection)
    - docs/evidence/domain-purity.json
  out:
    - Non-backend domain directories (mobile/shared)
    - Broader dependency graph enforcement beyond specified purity rules

context:
  standards_tier: backend
  issues: []
  related_docs:
    - standards/backend-tier.md#domain-service-layer
    - standards/typescript.md#maintainability-pillars--concrete-heuristics
    - standards/global.md#example-quality-gate
  repo_paths:
    - scripts/ci/check-domain-purity.mjs
    - backend/package.json
    - scripts/evidence-bundle
    - docs/evidence/domain-purity.json
  dependencies: []

environment:
  os: ubuntu-22.04
  runtimes:
    node: "20.x"
  tools:
    - name: pnpm
      version: "8.x"
    - name: typescript
      version: "5.x"

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write
    network: enabled
  coding_guidelines:
    - Keep diffs minimal and focused
    - Respect repository conventions
  prohibited:
    - No secrets or tokens in code
    - No unrelated file changes

plan:
  - id: 1
    title: Audit domain modules and confirm heuristics
    details: Inspect backend/src for domain exports and catalogue purity expectations.
    commands:
      - rg "export function" backend/src/domain
    expected_files_touched: []
  - id: 2
    title: Implement AST-based purity checker
    details: Write scripts/ci/check-domain-purity.mjs using TypeScript compiler API and emit evidence JSON.
    commands:
      - node --version
    expected_files_touched:
      - scripts/ci/check-domain-purity.mjs
  - id: 3
    title: Wire checker into QA and evidence bundle
    details: Update backend qa:static script and evidence bundle workflow to execute the checker.
    commands:
      - pnpm --filter @photoeditor/backend run qa:static
    expected_files_touched:
      - backend/package.json
      - scripts/evidence-bundle
  - id: 4
    title: Validate failure/success scenarios
    details: Run checker against clean tree and with intentional violation to confirm exit codes and artifact.
    commands:
      - node scripts/ci/check-domain-purity.mjs --output docs/evidence/domain-purity.json
    expected_files_touched:
      - docs/evidence/domain-purity.json

acceptance_criteria:
  - Checker fails with actionable output when an exported domain function lacks Result/ResultAsync return type.
  - Checker fails when domain files import @aws-sdk/* or contain throw statements.
  - Successful run writes docs/evidence/domain-purity.json summarizing results and passes in CI.
  - Evidence bundle script invokes the checker and includes the JSON artifact.
  modularity:
    - "Handlers <=75 LOC, complexity <=10"
    - "Services <=200 LOC, complexity <=15"
    - "No cross-layer imports (dependency-cruiser enforced)"
  testability:
    - "Service/Adapter: Line >=80%, Branch >=70%"
    - "Contract tests pass for all routes"

validation:
  commands:
    - pnpm --filter @photoeditor/backend run qa:static
    - node scripts/ci/check-domain-purity.mjs --output docs/evidence/domain-purity.json
  manual_checks:
    - Open docs/evidence/domain-purity.json and confirm summary + zero violations when code is clean.
  artifacts:
    - docs/evidence/domain-purity.json

deliverables:
  - scripts/ci/check-domain-purity.mjs
  - backend/package.json
  - scripts/evidence-bundle
  - docs/evidence/domain-purity.json

risks:
  - description: False positives if domain modules intentionally expose non-Result helpers.
    mitigation: Allow opt-out by limiting scan to backend/src/domain and documenting helper relocation needs.
