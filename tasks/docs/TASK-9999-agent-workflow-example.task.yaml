# Example task demonstrating agent-optimized structure
# This is a reference task showing how to structure tasks for the agent orchestration workflow
# Copy to: tasks/<area>/TASK-<id>-<short-slug>.task.yaml
# See tasks/README.md for authoring guide

schema_version: "1.0"
id: TASK-9999
title: "Example: Agent-optimized task structure"
status: todo
priority: P2
area: docs

description: >-
  This is a reference task showing the agent-optimized structure.
  Use this as a guide when creating new tasks that will be executed
  by the task-runner orchestrator and its specialized agent pipeline.

outcome: >-
  Developers understand how to structure tasks for agent orchestration
  and can reference this example when creating new tasks.

scope:
  in:
    - This is a documentation example only
    - Demonstrates affected_packages field usage
    - Shows validation command grouping by test type
  out:
    - No actual implementation required
    # Standard exclusions: See standards/cross-cutting.md#hard-fail-controls

context:
  affected_packages: [backend, shared]  # NEW: Guides test agent spawning
  standards_tier: backend
  issues: []
  related_docs:
    - tasks/AGENTS.md  # Agent execution model
    - tasks/README.md  # Task authoring guide
  repo_paths:
    - backend/src/services/example.ts
    - shared/schemas/example.schema.ts
    - backend/tests/unit/services/example.test.ts

environment:
  os: ubuntu-22.04
  runtimes:
    node: "18.x"
  tools:
    - name: npm
      version: "9.x"

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write
    network: enabled
  coding_guidelines:
    - Keep diffs minimal and focused
    - Respect repository conventions
  prohibited:
    - No secrets or tokens in code
    - No unrelated file changes

plan:
  - id: 1
    title: Analyze current code paths
    details: Read files; confirm dependency boundaries.
    commands:
      - rg -n "example" backend/src/
    expected_files_touched: []
  - id: 2
    title: Implement core change
    details: Apply minimal diffs; ensure handlers → services → adapters flow.
    commands: []
    expected_files_touched:
      - backend/src/services/example.ts
  - id: 3
    title: Add/adjust tests
    details: Cover edge cases, error paths, idempotency; ensure coverage thresholds are met.
    commands:
      - pnpm turbo run test --filter=@photoeditor/backend -- --coverage
    expected_files_touched:
      - backend/tests/unit/services/example.test.ts

acceptance_criteria:
  - Example task demonstrates agent-optimized structure
  - All validation commands use pnpm turbo with correct filters
  - affected_packages field properly guides test agent selection
  - Validation commands grouped by test type (static, unit, contract)
  # Tier-specific maintainability: See standards/backend-tier.md
  modularity:
    - "Handlers ≤75 LOC, complexity ≤10"
    - "Services ≤200 LOC, complexity ≤15"
    - "No cross-layer imports (dependency-cruiser enforced)"
  testability:
    - "Service/Adapter: Line ≥80%, Branch ≥70%"
    - "Contract tests pass for all routes"

validation:
  # Grouped by test agent type for orchestration
  # This structure tells task-runner which agents to spawn

  static_checks:  # Run by test-static-fitness agent
    - pnpm turbo run qa:static --filter=@photoeditor/backend
    - npx dependency-cruiser --validate .dependency-cruiser.json src/
    - "! grep -r '@aws-sdk' backend/src/lambdas/ || echo 'Handlers must not import SDK'"  # Hard fail check

  unit_tests:  # Run by test-unit-{package} agents based on affected_packages
    backend:
      - pnpm turbo run test --filter=@photoeditor/backend -- --coverage --coverageThreshold='{"global":{"lines":80,"branches":70}}'
    shared:
      - pnpm turbo run test --filter=@photoeditor/shared
    # mobile:  # Uncomment if affected_packages includes mobile
    #   - pnpm turbo run test --filter=photoeditor-mobile

  contract_tests:  # Run by test-contract agent (if shared in affected_packages)
    - pnpm turbo run test:contract --filter=@photoeditor/backend
    - pnpm turbo run contracts:check --filter=@photoeditor/shared

  manual_checks:
    - Verify this example task follows the documented structure
    - Check that all commands use correct pnpm turbo syntax

  artifacts:
    - screenshots: []

deliverables:
  - tasks/docs/TASK-9999-agent-workflow-example.task.yaml
  # Evidence: Generated by validation commands, captured in changelog

risks:
  # Standard risks: See standards/cross-cutting.md#hard-fail-scenarios
  - description: Example task structure becomes outdated
    mitigation: Update when agent workflow changes, reference in task authoring docs

# Agent output artifacts:
# - task-picker writes: .agent-output/task-picker-summary-{TASK-ID}.md (work summary)
# - test agents write: docs/tests/reports/YYYY-MM-DD-{agent-type}.md (validation results)
# - task-runner creates: changelog/YYYY-MM-DD-{topic}.md (final changelog aggregating all above)
#
# Note: Only task-runner creates the changelog; task-picker focuses on implementation.

# Workflow when this task is executed:
# 1. task-runner picks TASK-9999 via scripts/pick-task.sh
# 2. Spawns task-picker → implements plan, writes .agent-output/task-picker-summary-TASK-9999.md
# 3. Detects affected_packages: [backend, shared] from task file
# 4. Spawns test-static-fitness → validates qa:static for backend
# 5. Spawns test-unit-backend and test-unit-shared in parallel
# 6. Spawns test-contract (since shared is affected)
# 7. Aggregates all reports → creates changelog/YYYY-MM-DD-task-9999-example.md
# 8. Archives task to docs/completed-tasks/
# 9. Git commits changes
