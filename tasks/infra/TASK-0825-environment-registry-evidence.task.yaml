schema_version: "1.0"
id: TASK-0825
title: "Stand up infrastructure environment registry"
status: todo
blocked_reason: null
priority: P1
area: infra
order: null
blocked_by:
  - TASK-0823

description: >-
  Create an authoritative environment registry that captures SST and Terraform outputs per stage (dev, stage, prod), ties
  them to deployment timestamps, and stores evidence for audit. Standards/infrastructure-tier.md requires this registry to
  prove configuration drift is controlled.

outcome: >-
  A versioned registry document or automation populates environment metadata for each stage, persists it under docs/infra,
  and integrates with validation workflows so auditors can trace resource identifiers and their provenance.

scope:
  in:
    - scripts or automation that collect outputs from SST and Terraform
    - docs/infra/environment-registry.md (or generated JSON)
    - Updates to validation workflow notes referencing the registry
  out:
    - Changes to resource provisioning (handled in other tasks)
    - Secrets or runtime credentials (store references only)

context:
  affected_packages: []
  standards_tier: infra
  related_docs:
    - standards/AGENTS.md
    - standards/infrastructure-tier.md
    - standards/cross-cutting.md
    - standards/testing-standards.md
    - docs/infra/terraform-control-plane-evidence.md
  repo_paths:
    - docs/infra
    - scripts
  dependencies: []

environment:
  os: ubuntu-22.04
  runtimes:
    node: "20.x"
  tools:
    - name: pnpm
      version: "8.x"
    - name: terraform
      version: "1.9.x"
  data: []

constraints:
  approvals_required: false
  sandbox:
    filesystem: workspace-write
    network: enabled
  coding_guidelines:
    - Prefer automation over manual tables; registry should be reproducible.
    - Include timestamps and source commands for each entry.
  prohibited:
    - Do not store secrets or access keys; reference Secret Manager/SSM identifiers instead.

plan:
  - id: 1
    title: Define registry schema and data sources
    details: Review standards/infrastructure-tier and control-plane evidence to determine required fields (stage, stack,
      outputs, last-validated timestamp) and agree on storage format.
    actor: agent
    inputs:
      - standards/infrastructure-tier.md
      - docs/infra/terraform-control-plane-evidence.md
    outputs: []
    definition_of_done:
      - Registry schema documented with field list mapped to standards clauses.
    estimate: S
    expected_files_touched: []
  - id: 2
    title: Implement data collection script or workflow
    details: Author script under scripts/infra/ or workflow that extracts outputs from SST and Terraform commands and
      writes structured JSON/YAML matching the schema.
    actor: agent
    inputs:
      - scripts
      - infra/sst
      - infrastructure
    outputs:
      - scripts/infra/export-environment-registry.ts
    definition_of_done:
      - Script runs locally to produce registry artifact without manual edits.
      - TypeScript lint/typecheck passes with strict settings.
    estimate: M
    expected_files_touched:
      - scripts/infra/export-environment-registry.ts
  - id: 3
    title: Publish registry artifact and documentation
    details: Commit generated registry under docs/infra, document refresh cadence, and link artifact references within the
      Terraform control-plane evidence doc.
    actor: agent
    inputs:
      - scripts/infra/export-environment-registry.ts
    outputs:
      - docs/infra/environment-registry.json
      - docs/infra/environment-registry.md
    definition_of_done:
      - Registry JSON committed with entries for dev/stage/prod including resource identifiers.
      - Documentation includes refresh instructions and audit usage guidance.
    estimate: S
    expected_files_touched:
      - docs/infra/environment-registry.json
      - docs/infra/environment-registry.md
  - id: 4
    title: Wire registry into validation workflow
    details: Update relevant validation docs or scripts so test agents reference the registry when confirming environment
      metadata, ensuring automation knows where to find the artifact.
    actor: agent
    inputs:
      - docs/infra/environment-registry.md
      - .claude/agents/test-validation-backend.md
      - .claude/agents/test-validation-mobile.md
      - .claude/agents/test-validation-shared.md
    outputs:
      - docs/infra/terraform-control-plane-evidence.md
      - .claude/agents/test-validation-backend.md
      - .claude/agents/test-validation-mobile.md
      - .claude/agents/test-validation-shared.md
    definition_of_done:
      - Validation docs link to registry artifact.
      - Test agents mention registry as required evidence without weakening guardrails.
    estimate: S
    expected_files_touched:
      - docs/infra/terraform-control-plane-evidence.md
      - .claude/agents/test-validation-backend.md
      - .claude/agents/test-validation-mobile.md
      - .claude/agents/test-validation-shared.md

acceptance_criteria:
  must:
    - Environment registry artifact includes dev/stage/prod entries with stack names, key outputs, and last-validated dates.
    - Documentation explains update cadence and references standards/infrastructure-tier.md evidence requirements.
    - Validation docs/agents reference the registry without relaxing test or TypeScript guardrails.
    - Registry generation script runs via `pnpm` script with documentation.
  quality_gates:
    - Affected standards references remain satisfied; note any deviations and link the follow-up standards change request.
    - No lint/type errors in affected packages.

artifacts:
  - path: docs/infra/environment-registry.json
    description: Machine-readable registry of environment outputs per stage.
  - path: docs/infra/environment-registry.md
    description: Human-readable registry documentation and refresh procedure.

deliverables:
  - scripts/infra/export-environment-registry.ts
  - docs/infra/environment-registry.json
  - docs/infra/environment-registry.md
  - Updated validation agent documentation referencing the registry

risks:
  - description: Registry could drift if automation fails or outputs change unexpectedly.
    mitigation: Integrate registry generation into CI and add monitoring for stale timestamps.
